project\_name: InboxGenie
overview: |
InboxGenie is a Python-and-React web application that integrates with Microsoft Graph and (planned) cloud LLMs to help users condense and organize their emails. It streamlines mailbox management by extracting sender, subject, and snippet for each email, with future plans for AI-driven foldering using a cloud LLM. The app is Dockerized and Azure-deployable.

repository\_structure: |
.
├── README.md               # High-level overview & quickstart
├── .gitignore              # Ignored files (env, venv, cache, logs)
├── copilot.config.json     # Copilot agent config (default context: docs/roadmap.yaml)
├── docs/
│   └── roadmap.yaml        # Project goals, constraints, and roadmap
├── tokens.db               # SQLite DB for OAuth tokens
├── frontend/
│   ├── Dockerfile          # Multi-stage build and Nginx deploy
│   ├── index.html          # HTML entrypoint
│   ├── package.json        # Frontend dependencies & scripts
│   ├── vite.config.js      # Dev server & proxy to backend
│   ├── tailwind.config.js  # Tailwind setup
│   ├── postcss.config.js   # PostCSS plugins
│   └── src/
│       ├── main.jsx        # App bootstrap
│       ├── App.jsx         # Root component
│       └── components/
│           ├── ConnectMailbox.jsx  # MSAL login
│           ├── RunCleanupButton.jsx # Triggers email fetch
│           ├── StatusCard.jsx      # Processing summary
│           └── RawEmailResults.jsx # Flat email preview
└── backend/
├── Dockerfile          # Build image for Azure/AKS
├── requirements.txt    # Python dependencies
├── app/
│   ├── main.py         # FastAPI app, routers & endpoints
│   ├── auth.py         # OAuth (MSAL) flow & token persistence
│   ├── email\_client.py # Fetch and condense emails
│   ├── db.py           # SQLAlchemy engine & session setup
│   └── models\_token.py # Token model (user\_email, tokens)
└── tests/
└── \_\_init\_\_.py     # (No ML/LLM pipeline tests remain)

backend\_details:
fastapi\_app:
routers:
auth:
\- path: /api/auth/login
\- path: /api/auth/callback
email:
\- path: /api/email/emails/raw (POST, expects user\_email)
\- path: /api/email/store-token (expects JSON body with user\_email and access\_token via Pydantic model)
global\_endpoints:
\- /api/health
logging: "Structured with inboxgenie.\* loggers (INFO & error handling)"
authentication:
env\_vars:
\- AZURE\_CLIENT\_ID
\- AZURE\_CLIENT\_SECRET
\- AZURE\_TENANT\_ID
library: "MSAL"
storage: "SQLite via SQLAlchemy (tokens.db)"
email\_processing:
steps:
fetch: "Retrieve top 50 messages via Microsoft Graph"
condense: "Extract sender, subject, and snippet for each email"
response: "JSON with flat list of emails (no clustering or foldering)"
# Embedding, clustering, and local LLM steps removed

data\_persistence:
database: "SQLite (tokens.db), configurable via DATABASE\_URL"
orm: "SQLAlchemy, auto-creates tables on startup"

frontend\_details:
tech\_stack:
\- React 18
\- Vite
\- Tailwind CSS
\- MSAL Browser
\- Axios
auth\_flow: "ConnectMailbox triggers MSAL popup, acquires access token, and posts it to backend via /api/email/store-token before proceeding"
token\_storage: "Frontend posts access token and user\_email to /api/email/store-token after login; backend stores/updates token in DB via Pydantic model request"
pipeline\_trigger: "RunCleanupButton posts user\_email to /api/email/emails/raw"
components:
StatusCard: "Shows counts, timestamp"
RawEmailResults: "Previews flat list of emails with subject, snippet, sender"
dev\_proxy: "Vite proxies /api to [http://localhost:8000](http://localhost:8000)"

configuration:
env\_vars:
AZURE\_CLIENT\_ID: "Azure AD client ID"
AZURE\_CLIENT\_SECRET: "Azure AD client secret"
AZURE\_TENANT\_ID: "Azure AD tenant ID"
EMAIL\_SCOPES: "Mail.ReadWrite"
DATABASE\_URL: "Optional, defaults to sqlite:///./tokens.db"
copilot\_config: "Default context file: docs/roadmap.yaml"

deployment:
docker:
backend: "Python 3.11 slim, runs uvicorn on port 80"
frontend: "Multi-stage Node build, serves via Nginx"
cloud:
\- "Azure App Service / AKS (backend)"
\- "Azure Static Web Apps (frontend)"
infrastructure: "Terraform mentioned in roadmap (infra folder not in repo)"

testing\_ci:
tests: "No ML/LLM pipeline tests remain"
ci\_cd: "Planned GitHub Actions per roadmap"

roadmap:

* "OAuth via MSAL"
* "Batch email fetch & move"
* "Cloud LLM-based classification & folder mapping (planned)"
* "Undo support"
* "React dashboard UX enhancements"
* "CI/CD and Terraform automation"
